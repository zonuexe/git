git-hook(1)
===========

NAME
----
git-hook - run git hooks

SYNOPSIS
--------
[verse]
'git hook' run [--to-stdin=<path>] [--ignore-missing] [(-j|--jobs) <n>]
	<hook-name> [-- <hook-args>]
'git hook' list <hook-name>

DESCRIPTION
-----------

This command is an interface to git hooks (see linkgit:githooks[5]).
Currently it only provides a convenience wrapper for running hooks for
use by git itself. In the future it might gain other functionality.

It's possible to use this command to refer to hooks which are not native to Git,
for example if a wrapper around Git wishes to expose hooks into its own
operation in a way which is already familiar to Git users. However, wrappers
invoking such hooks should be careful to name their hook events something which
Git is unlikely to use for a native hook later on. For example, Git is much less
likely to create a `mytool-validate-commit` hook than it is to create a
`validate-commit` hook.

This command parses the default configuration files for pairs of configs like
so:

  [hook "linter"]
    event = pre-commit
    command = ~/bin/linter --c

In this example, `[hook "linter"]` represents one script - `~/bin/linter --c` -
which can be shared by many repos, and even by many hook events, if appropriate.

Commands are run in the order Git encounters their associated
`hook.<name>.event` configs during the configuration parse (see
linkgit:git-config[1]). Although multiple `hook.linter.event` configs can be
added, only one `hook.linter.command` event is valid - Git uses "last-one-wins"
to determine which command to run.

So if you wanted your linter to run when you commit as well as when you push,
you would configure it like so:

  [hook "linter"]
    event = pre-commit
    event = pre-push
    command = ~/bin/linter --c

With this config, `~/bin/linter --c` would be run by Git before a commit is
generated (during `pre-commit`) as well as before a push is performed (during
`pre-push`).

And if you wanted to run your linter as well as a secret-leak detector during
only the "pre-commit" hook event, you would configure it instead like so:

  [hook "linter"]
    event = pre-commit
    command = ~/bin/linter --c
  [hook "no-leaks"]
    event = pre-commit
    command = ~/bin/leak-detector

With this config, before a commit is generated (during `pre-commit`), Git would
first start `~/bin/linter --c` and second start `~/bin/leak-detector`. It would
evaluate the output of each when deciding whether to proceed with the commit.

For a full list of hook events which you can set your `hook.<name>.event` to,
and how hooks are invoked during those events, see linkgit:githooks[5].

In general, when instructions suggest adding a script to
`.git/hooks/<hook-event>`, you can specify it in the config instead by running
`git config --add hook.<some-name>.command <path-to-script> && git config --add
hook.<some-name>.event <hook-event>` - this way you can share the script between
multiple repos. That is, `cp ~/my-script.sh ~/project/.git/hooks/pre-commit`
would become `git config --add hook.my-script.command ~/my-script.sh && git
config --add hook.my-script.event pre-commit`.

SUBCOMMANDS
-----------

run::
	Runs hooks configured for `<hook-name>`, in the order they are
	discovered during the config parse.
+
Any positional arguments to the hook should be passed after an
optional `--` (or `--end-of-options`, see linkgit:gitcli[7]). The
arguments (if any) differ by hook name, see linkgit:githooks[5] for
what those are.

list::
	Print a list of hooks which will be run on `<hook-name>` event. If no
	hooks are configured for that event, print nothing and return 1.

OPTIONS
-------

--to-stdin::
	For "run"; Specify a file which will be streamed into the
	hook's stdin. The hook will receive the entire file from
	beginning to EOF.

--ignore-missing::
	Ignore any missing hook by quietly returning zero. Used for
	tools that want to do a blind one-shot run of a hook that may
	or may not be present.

-j::
--jobs::
	Only valid for `run`.
+
Specify how many hooks to run simultaneously. If this flag is not specified, use
the value of the `hook.jobs` config. If the config is not specified, use the
number of CPUs on the current system. Some hooks may be ineligible for
parallelization: for example, 'commit-msg' intends hooks modify the commit
message body and cannot be parallelized.

CONFIGURATION
-------------
include::config/hook.txt[]

SEE ALSO
--------
linkgit:githooks[5]

GIT
---
Part of the linkgit:git[1] suite
